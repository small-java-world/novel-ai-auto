// テストファイル: fileNameTemplate.test.ts
import { describe, test, beforeEach, afterEach, expect } from 'vitest';
import type { FileNameTemplateContext, FileNameSanitizeOptions } from '../types';
import { generateFileName, sanitizeFileName } from './fileNameTemplate';

describe('ファイル名テンプレート機能（TASK-011）', () => {
  beforeEach(() => {
    // 【テスト前準備】: 各テスト実行前にテスト環境を初期化し、一貫したテスト条件を保証
    // 【環境初期化】: 前のテストの影響を受けないよう、状態をクリーンにリセット
  });

  afterEach(() => {
    // 【テスト後処理】: テスト実行後に作成された一時データや状態を削除
    // 【状態復元】: 次のテストに影響しないよう、システムを元の状態に戻す
  });

  describe('基本的なテンプレート展開', () => {
    test('基本テンプレート "{date}_{prompt}_{seed}_{idx}" が正しく展開される', () => {
      // 【テスト目的】: 最も基本的なテンプレートパターンが正しくトークン展開されることを確認
      // 【テスト内容】: 各トークンが適切にコンテキスト値で置換され、完全なファイル名が生成される
      // 【期待される動作】: テンプレート内の全トークンがコンテキスト値で置換され、アンダースコア区切りの文字列が返される
      // 🟢 信頼性レベル: 要件定義書の基本使用例に直接対応

      // 【テストデータ準備】: REQ-303の基本パターンに基づく標準的なコンテキストデータを用意
      // 【初期条件設定】: 全てのトークンに対応する値が設定された完全なコンテキスト
      const template = '{date}_{prompt}_{seed}_{idx}';
      const context: FileNameTemplateContext = {
        date: '20240914-120000',
        prompt: 'masterpiece, 1girl',
        seed: '12345',
        idx: 1,
      };

      // 【実際の処理実行】: generateFileName関数でテンプレート展開を実行
      // 【処理内容】: テンプレート文字列内の各トークンをコンテキスト値で置換する処理
      const result = generateFileName(template, context);

      // 【結果検証】: 展開結果が期待されるパターンと完全一致することを確認
      // 【期待値確認】: 要件定義書L51の出力例と一致する結果が得られること
      expect(result).toBe('20240914-120000_masterpiece, 1girl_12345_1'); // 【確認内容】: 基本テンプレートの完全展開 🟢
    });

    test('一部のオプショナルトークンが未定義の場合にデフォルト値で展開される', () => {
      // 【テスト目的】: seedやidxが未定義の場合でも、適切なデフォルト処理が行われることを確認
      // 【テスト内容】: オプショナル値が未設定のコンテキストでテンプレート展開を実行
      // 【期待される動作】: 未定義のトークンは空文字または定義されたデフォルト値で置換される
      // 🟡 信頼性レベル: EDGE-103-3の「未知トークン空解決」から妥当な推測

      // 【テストデータ準備】: seedとidxを意図的に未定義にしたコンテキスト
      // 【初期条件設定】: 必須項目のみ設定し、オプショナル項目は未定義状態
      const template = '{date}_{prompt}_{seed}_{idx}';
      const context: FileNameTemplateContext = {
        date: '20240914-120000',
        prompt: 'simple test',
        // seed, idx は未定義
      };

      // 【実際の処理実行】: 不完全なコンテキストでのテンプレート展開
      // 【処理内容】: 未定義トークンのデフォルト処理を含むテンプレート展開
      const result = generateFileName(template, context);

      // 【結果検証】: 未定義トークンが適切にデフォルト値で置換されることを確認
      // 【期待値確認】: seedは空文字、idxは1（デフォルト）で処理される想定
      expect(result).toBe('20240914-120000_simple test__1'); // 【確認内容】: オプショナルトークンのデフォルト処理 🟡
    });

    test('未知のトークンが含まれる場合は空文字で解決される', () => {
      // 【テスト目的】: 定義されていないトークンが含まれる場合の安全な処理を確認
      // 【テスト内容】: 未知のトークンを含むテンプレートでの展開実行
      // 【期待される動作】: 未知トークンは空文字に解決され、警告ログが出力される
      // 🟢 信頼性レベル: EDGE-103-3の「未知トークンは空に解決し警告ログ」に直接対応

      // 【テストデータ準備】: 未知のトークン{unknown}を含むテンプレート
      // 【初期条件設定】: 既知トークンのみを持つ標準的なコンテキスト
      const template = '{date}_{prompt}_{unknown}';
      const context: FileNameTemplateContext = {
        date: '20240914-120000',
        prompt: 'test',
      };

      // 【実際の処理実行】: 未知トークンを含むテンプレートの展開
      // 【処理内容】: 未知トークンの安全な処理を含むテンプレート展開
      const result = generateFileName(template, context);

      // 【結果検証】: 未知トークンが空文字で処理されることを確認
      // 【期待値確認】: EDGE-103-3の仕様通り未知トークンは空に解決される
      expect(result).toBe('20240914-120000_test_'); // 【確認内容】: 未知トークンの空文字解決 🟢
    });
  });

  describe('サニタイズ機能', () => {
    test('Windows禁止文字 (<>:"/\\|?*) が適切に置換される', () => {
      // 【テスト目的】: Windows環境での禁止文字が安全な文字に置換されることを確認
      // 【テスト内容】: 全ての禁止文字を含む文字列でのサニタイズ処理
      // 【期待される動作】: 禁止文字がデフォルトの置換文字（_）で置換される
      // 🟢 信頼性レベル: EDGE-103-1の「禁止文字含有: a<b>:\/|?* → a_b________」に直接対応

      // 【テストデータ準備】: 全ての禁止文字を含む入力文字列
      // 【初期条件設定】: Windows禁止文字が連続して含まれる極端なケース
      const input = 'a<b>:"/\\|?*c';

      // 【実際の処理実行】: sanitizeFileName関数で禁止文字の置換を実行
      // 【処理内容】: Windows禁止文字セットによるサニタイズ処理
      const result = sanitizeFileName(input);

      // 【結果検証】: 全ての禁止文字が置換文字に変更されることを確認
      // 【期待値確認】: EDGE-103-1の例示通り、禁止文字が「_」で置換される
      expect(result).toBe('a_b_c'); // 【確認内容】: Windows禁止文字の置換と連続文字集約 🟢
    });

    test('連続する禁止文字が単一の置換文字にまとめられる', () => {
      // 【テスト目的】: 連続する禁止文字が冗長にならず、単一の置換文字にまとめられることを確認
      // 【テスト内容】: 複数の禁止文字が連続する文字列でのサニタイズ処理
      // 【期待される動作】: 連続する禁止文字群が単一の置換文字に集約される
      // 🟡 信頼性レベル: EDGE-103-1の「連続はまとめて"_"」から妥当な推測

      // 【テストデータ準備】: 複数の禁止文字が連続する文字列
      // 【初期条件設定】: 連続禁止文字のパターンを含む入力
      const input = 'test<>:"/file';

      // 【実際の処理実行】: 連続禁止文字のまとめ処理を含むサニタイズ
      // 【処理内容】: 連続する禁止文字を単一の置換文字に集約する処理
      const result = sanitizeFileName(input);

      // 【結果検証】: 連続禁止文字が単一の置換文字にまとめられることを確認
      // 【期待値確認】: <>"/ の連続が単一の _ になることを確認
      expect(result).toBe('test_file'); // 【確認内容】: 連続禁止文字の集約処理 🟡
    });

    test('末尾のピリオドと空白が除去される', () => {
      // 【テスト目的】: Windows環境で問題となる末尾のピリオドと空白が適切に除去されることを確認
      // 【テスト内容】: 末尾に不正文字が含まれる文字列でのサニタイズ処理
      // 【期待される動作】: 末尾の不正文字（ピリオド、空白）が完全に除去される
      // 🟢 信頼性レベル: EDGE-103-5の「末尾の`.`/空白は除去」に直接対応

      // 【テストデータ準備】: 末尾にピリオドと空白を含む文字列
      // 【初期条件設定】: WindowsでファイルSystem問題となる末尾文字パターン
      const input = 'filename...   ';

      // 【実際の処理実行】: 末尾不正文字の除去を含むサニタイズ
      // 【処理内容】: 末尾のピリオドと空白の除去処理
      const result = sanitizeFileName(input);

      // 【結果検証】: 末尾の不正文字が完全に除去されることを確認
      // 【期待値確認】: EDGE-103-5の仕様通り末尾不正文字が除去される
      expect(result).toBe('filename'); // 【確認内容】: 末尾不正文字の完全除去 🟢
    });
  });

  describe('長さ制御', () => {
    test('255文字を超える場合に適切に切り詰められる', () => {
      // 【テスト目的】: ファイル名が最大長制限を超える場合の安全な切り詰め処理を確認
      // 【テスト内容】: 255文字を超える長いファイル名での切り詰め処理
      // 【期待される動作】: 指定された最大長で安全に切り詰められる
      // 🟢 信頼性レベル: EDGE-103-2の「255超なら末尾優先で切詰め」に直接対応

      // 【テストデータ準備】: 255文字を超える長大な文字列
      // 【初期条件設定】: デフォルト最大長制限を大幅に超える入力
      const input = 'a'.repeat(300); // 300文字の長大文字列

      // 【実際の処理実行】: 最大長制限による切り詰め処理
      // 【処理内容】: 255文字制限での安全な切り詰め処理
      const result = sanitizeFileName(input, { maxLength: 255 });

      // 【結果検証】: 結果が最大長制限内に収まることを確認
      // 【期待値確認】: EDGE-103-2の仕様通り255文字以内に切り詰められる
      expect(result).toHaveLength(255); // 【確認内容】: 最大長制限の適用 🟢
      expect(result).toBe('a'.repeat(255)); // 【確認内容】: 切り詰め内容の正確性 🟢
    });

    test('拡張子が含まれる場合は拡張子を保持して切り詰める', () => {
      // 【テスト目的】: 拡張子付きファイル名での切り詰め時に拡張子が保持されることを確認
      // 【テスト内容】: 拡張子を含む長大なファイル名での切り詰め処理
      // 【期待される動作】: 拡張子を保持しつつ、基本名部分が適切に切り詰められる
      // 🟢 信頼性レベル: EDGE-103-2の「拡張子保持（.png）」に直接対応

      // 【テストデータ準備】: 拡張子付きの長大なファイル名
      // 【初期条件設定】: 最大長を超える基本名と.png拡張子を持つファイル名
      const input = 'b'.repeat(300) + '.png';

      // 【実際の処理実行】: 拡張子保持機能を含む切り詰め処理
      // 【処理内容】: 拡張子を保持しつつ基本名を切り詰める処理
      const result = sanitizeFileName(input, { maxLength: 255 });

      // 【結果検証】: 拡張子が保持され全体が最大長以内に収まることを確認
      // 【期待値確認】: 拡張子.pngが保持され、全体が255文字以内になる
      expect(result).toHaveLength(255); // 【確認内容】: 最大長制限の適用 🟢
      expect(result.endsWith('.png')).toBe(true); // 【確認内容】: 拡張子の保持 🟢
    });
  });

  describe('エラーケース', () => {
    test('空の結果になる場合は "untitled" にフォールバックされる', () => {
      // 【テスト目的】: 全てのトークンが空になる極端なケースでの安全な処理を確認
      // 【テスト内容】: 空の文字列を生成するコンテキストでのテンプレート展開
      // 【期待される動作】: 空結果の場合にデフォルト名「untitled」で代替される
      // 🟢 信頼性レベル: EDGE-103-4の「すべて空となる場合はuntitledにフォールバック」に直接対応

      // 【テストデータ準備】: 全てのトークンが空文字になるコンテキスト
      // 【初期条件設定】: 全ての値が空または未定義のコンテキスト
      const template = '{prompt}_{seed}';
      const context: FileNameTemplateContext = {
        date: '',
        prompt: '',
        // seed は未定義
      };

      // 【実際の処理実行】: 空結果に対するフォールバック処理
      // 【処理内容】: 全トークンが空の場合のデフォルト名生成処理
      const result = generateFileName(template, context);

      // 【結果検証】: 空結果の場合にuntitledフォールバックが適用されることを確認
      // 【期待値確認】: EDGE-103-4の仕様通りuntitledが返される
      expect(result).toBe('untitled'); // 【確認内容】: 空結果でのフォールバック処理 🟢
    });

    test('無効なテンプレート（未閉のカール）でエラーが発生する', () => {
      // 【テスト目的】: 構文的に無効なテンプレートに対する適切なエラー処理を確認
      // 【テスト内容】: 閉じ括弧がないテンプレートでの処理実行
      // 【期待される動作】: テンプレート解析エラーが適切に投げられる
      // 🟢 信頼性レベル: 要件L61の「無効なテンプレ（未閉カール）→テンプレ解決エラー」に直接対応

      // 【テストデータ準備】: 構文エラーを含む無効なテンプレート
      // 【初期条件設定】: 閉じ括弧が不足する不正なテンプレート
      const template = '{date}_{prompt'; // 閉じ括弧なし
      const context: FileNameTemplateContext = {
        date: '20240914-120000',
        prompt: 'test',
      };

      // 【実際の処理実行】: 無効テンプレートでのエラー発生を期待
      // 【処理内容】: テンプレート解析時の構文エラー処理
      expect(() => {
        generateFileName(template, context);
      }).toThrow(); // 【確認内容】: テンプレート解析エラーの適切な投出 🟢
    });

    test('非文字列型の入力でバリデーションエラーが発生する', () => {
      // 【テスト目的】: 型安全性を確保するための入力バリデーションを確認
      // 【テスト内容】: 不正な型の入力に対するエラー処理
      // 【期待される動作】: 型エラーまたはバリデーションエラーが適切に発生する
      // 🟢 信頼性レベル: 要件L62の「非文字型入力→引数バリデーションエラー」に直接対応

      // 【テストデータ準備】: 非文字列型の無効な入力
      // 【初期条件設定】: TypeScriptの型チェックを回避した不正入力
      const template = null as any;
      const context = {} as FileNameTemplateContext;

      // 【実際の処理実行】: 非文字列入力でのバリデーションエラー期待
      // 【処理内容】: 入力型バリデーションエラー処理
      expect(() => {
        generateFileName(template, context);
      }).toThrow(); // 【確認内容】: 引数バリデーションエラーの適切な投出 🟢
    });

    test('maxLength が 0以下の場合にバリデーションエラーが発生する', () => {
      // 【テスト目的】: 設定値の妥当性検証による堅牢性を確認
      // 【テスト内容】: 無効な最大長設定に対するエラー処理
      // 【期待される動作】: 設定値バリデーションエラーが適切に発生する
      // 🟢 信頼性レベル: 要件L62の「maxLength<=0→引数バリデーションエラー」に直接対応

      // 【テストデータ準備】: 無効な最大長設定
      // 【初期条件設定】: 0以下の不正な最大長値
      const input = 'test';
      const options: FileNameSanitizeOptions = { maxLength: 0 };

      // 【実際の処理実行】: 無効設定値でのバリデーションエラー期待
      // 【処理内容】: 設定値バリデーション処理
      expect(() => {
        sanitizeFileName(input, options);
      }).toThrow(); // 【確認内容】: 設定値バリデーションエラーの適切な投出 🟢
    });
  });

  describe('衝突回避機能', () => {
    test('重複するファイル名に対してサフィックスが付与される', () => {
      // 【テスト目的】: ファイル名重複時の自動的なサフィックス付与機能を確認
      // 【テスト内容】: 既存ファイル名との重複検出と回避処理
      // 【期待される動作】: 重複検出時に _001, _002... の形式でサフィックスが付与される
      // 🟢 信頼性レベル: EDGE-103-6の「衝突回避: 既存重複時は _001, _002…を付与」に直接対応

      // 【テストデータ準備】: 重複を想定したファイル名と衝突resolver
      // 【初期条件設定】: 重複検出をシミュレートするcollisionResolver
      const input = 'test';
      let callCount = 0;
      const options: FileNameSanitizeOptions = {
        collisionResolver: (base: string, i: number) => {
          callCount++;
          return `${base}_${String(i).padStart(3, '0')}`;
        },
      };

      // 【実際の処理実行】: 衝突回避機能を含むサニタイズ処理
      // 【処理内容】: 重複検出時のサフィックス付与処理
      const result = sanitizeFileName(input, options);

      // 【結果検証】: 衝突解決コールバックが実行されることを確認
      // 【期待値確認】: collisionResolverが呼ばれサフィックス付与される
      expect(callCount).toBeGreaterThan(0); // 【確認内容】: 衝突resolver の実行 🟡
      expect(result).toMatch(/_\d{3}$/); // 【確認内容】: サフィックスパターンの確認 🟢
    });
  });
});
